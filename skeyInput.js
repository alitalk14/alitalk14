// scripts/backfill-sku-keys.mjs
// node >=18, "type": "module" Í∂åÏû•
import mongoose from "mongoose";

// ‚ú® Ïó¨Í∏∞ÏÑú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî
const CONFIG = {
  // Ï≤òÎ¶¨Ìï† Î¨∏ÏÑú _id Î∞∞Ïó¥. ÎπÑÏö∞Î©¥ Ï†ÑÏ≤¥ Ï≤òÎ¶¨.
  TEST_IDS: [],
  // trueÎ©¥ cKey/spKeyÍ∞Ä ÎπÑÏñ¥ÏûàÎäî SKUÎßå Ï±ÑÏõÄ (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
  ONLY_MISSING: false,
  // trueÎ©¥ Ïã§Ï†ú Ïì∞Í∏∞ ÏóÜÏù¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Îßå Î°úÍ∑∏
  DRY_RUN: false,
  // Î≤åÌÅ¨ Î∞∞Ïπò ÌÅ¨Í∏∞
  BATCH_SIZE: 500,
  // Îπà Î¨∏ÏûêÏó¥('') ÎòêÎäî ÎØ∏Ï°¥Ïû¨(normalize Í≤∞Í≥ºÍ∞Ä ÎπÑÏñ¥ÏûàÏùå)Î©¥ SET ÌïòÏßÄ ÏïäÏùå
  SKIP_EMPTY_KEYS: true,
};

import ProductDetail from "./models/ProductDetail.js";
import {
  normalizeCForCompare,
  normalizeSpForCompare,
} from "./utils/normalize.js";
import dbConnect from "./utils/dbConnect.js";

async function backfillSkuKeys() {
  await dbConnect();
  //   let res = await ProductDetail.find({ cId1: "68b7286ae5b56421d2712568" })
  //     .populate("cId1", "cId cn")
  //     .populate("cId2", "cId cn")
  //     .lean({ virtuals: true });

  //   for (let id of res) {
  //     CONFIG.TEST_IDS.push(id._id);
  //   }

  const projection = {
    _id: 1,
    "sku_info.sil.c": 1,
    "sku_info.sil.sp": 1,
    "sku_info.sil.cKey": 1,
    "sku_info.sil.spKey": 1,
  };

  // ID ÌïÑÌÑ∞ (Îã®Ïùº/Îã§Ï§ë/ÏóÜÏùå)
  let idFilter = {};
  if (Array.isArray(CONFIG.TEST_IDS) && CONFIG.TEST_IDS.length > 0) {
    idFilter =
      CONFIG.TEST_IDS.length === 1
        ? { _id: CONFIG.TEST_IDS[0] }
        : { _id: { $in: CONFIG.TEST_IDS } };
  }

  // ONLY_MISSING Ï°∞Í±¥: cKey/spKeyÍ∞Ä ÎπÑÏñ¥ÏûàÎäî SKUÍ∞Ä Ï°¥Ïû¨ÌïòÎäî Î¨∏ÏÑúÎßå
  const onlyMissingFilter = CONFIG.ONLY_MISSING
    ? {
        "sku_info.sil": {
          $elemMatch: {
            $or: [{ cKey: { $exists: false } }, { spKey: { $exists: false } }],
          },
        },
      }
    : {};

  const filter = { ...idFilter, ...onlyMissingFilter };

  console.log(
    `Running backfill with filter: ${JSON.stringify(filter)} ${
      CONFIG.DRY_RUN ? "(DRY-RUN)" : ""
    }`
  );

  const cursor = ProductDetail.find(filter, projection).lean().cursor();

  let ops = [];
  let seen = 0;
  let updatedDocs = 0;
  let updatedItems = 0;

  for await (const doc of cursor) {
    seen++;
    const sil = doc?.sku_info?.sil || [];
    if (!Array.isArray(sil) || sil.length === 0) continue;

    const setPayload = {};
    let changedCountForDoc = 0;

    sil.forEach((item, idx) => {
      const c = item?.c ?? "";
      const sp = item?.sp ?? "";

      // Ï†ïÍ∑úÌôî Í≤∞Í≥ºÎ•º Î¨∏ÏûêÏó¥Î°ú ÏïàÏ†Ñ Î≥ÄÌôò + Ìä∏Î¶º
      const newSpKeyRaw = normalizeSpForCompare(sp);
      const newSpKey = (newSpKeyRaw == null ? "" : String(newSpKeyRaw)).trim();

      const pathS = `sku_info.sil.${idx}.spKey`;

      // üëá ÌïµÏã¨ Í∑úÏπô: Í≤∞Í≥ºÍ∞Ä ÎπàÎ¨∏Ïûê('')Î©¥ SET ÌïòÏßÄ ÏïäÏùå

      const canSetS =
        (!CONFIG.SKIP_EMPTY_KEYS || newSpKey.length > 0) &&
        (!CONFIG.ONLY_MISSING || item?.spKey == null || item?.spKey === "") &&
        item?.spKey !== newSpKey;

      if (canSetS) {
        setPayload[pathS] = newSpKey;
        changedCountForDoc++;
        updatedItems++;
      }
    });

    if (changedCountForDoc > 0) {
      if (CONFIG.DRY_RUN) {
        console.log(`[DRY] _id=${doc._id} $set:`, setPayload);
      } else {
        ops.push({
          updateOne: {
            filter: { _id: doc._id },
            update: { $set: setPayload },
            upsert: false,
          },
        });
        updatedDocs++;
      }
    }

    if (!CONFIG.DRY_RUN && ops.length >= CONFIG.BATCH_SIZE) {
      await ProductDetail.bulkWrite(ops, { ordered: false });
      console.log(
        `progress: seen=${seen}, updatedDocs=${updatedDocs}, updatedItems=${updatedItems}`
      );
      ops = [];
    }
  }

  if (!CONFIG.DRY_RUN && ops.length > 0) {
    await ProductDetail.bulkWrite(ops, { ordered: false });
  }

  if (seen === 0) {
    console.log("No documents matched the filter. ü§î");
  }

  console.log(
    `Done ‚úÖ seen=${seen}, updatedDocs=${updatedDocs}, updatedItems=${updatedItems} ${
      CONFIG.DRY_RUN ? "(DRY-RUN, no writes)" : ""
    }`
  );

  await mongoose.disconnect();
}

// Ïã§Ìñâ
backfillSkuKeys()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error("Error ‚ùó", err);
    process.exit(1);
  });
